title: Lambdas

text: Lambdas são basicamente funções anônimas que são usadas porque precisamos de algumas funções somente uma vez. Normalmente, nós criamos um lambda com o propósito único de passá-lo para uma função de ordem superior. Para criar um lambda, digitamos uma [code]\[/code] (porque isso meio que se parece com a letra grega lambda caso você seja vesgo o suficiente) e então nós escrevemos os parâmetros separados por espaços. Depois vem o [code]-&gt;[/code] e então o corpo da função. Normalmente as cercamos com parênteses, porque senão isso se estenderia para todo o lado direito.

Se você olhar 5 polegadas acima, você verá que nós utilizamos uma associação <i>where</i> em nossa função [code]numLongChains[/code] para fazer a função [code]isLong[/code] com o único propósito de passá-la para [code]filter[/code]. Bem, em vez de fazermos isso, podemos utilizar um lambda:

Lambdas são expressões, e é por isso que podemos apenas passá-las dessa forma. A expressão [code](\xs -&gt; length xs &gt; 15)[/code] retorna uma função que nos diz se o comprimento da lista que foi passada é maior do que 15.

Pessoas que não se famializaram muito bem antes com o funcionamento de currying e aplicações parciais frequentemente utilizam lambdas onde não deveriam. Por exemplo, as expressões [code]map (+3) [1,6,3,2][/code] e [code]map (\x -&gt; x + 3) [1,6,3,2][/code] são equivalentes já que ambos [code](+3)[/code] e [code](\x -&gt; x + 3)[/code] são funções que pegam um número e adicione 3 a ele. Não é preciso dizer que criar um lambda neste caso seria uma estupidez já que usar aplicação parcial é bem mais legível.

Como uma função normal, lambdas podem receber qualquer número de parâmetros:

E como uma função normal, você pode utilizar um casamento de padrões em lambdas. A única diferença é que você não define vários padrões para um único parâmetro, como fazer um [code][][/code] e um padrão [code](x:xs)[/code] para o mesmo parâmetro e depois ter valores que passam adiante disso. Se um casamento de padrões falhar em um lambda, um erro de tempo de execução ocorrerá. Portanto seja cuidadoso com pattern matching em lambdas! 

Lambdas são normalmente cercadas por parênteses a não ser que você queira estendê-la por todo o lado direito. Uma coisa interessante: como funções são curried por default, estes dois são equivalentes: 

Se definirmos uma função como essa, é óbvio porque a declaração de tipo é o que é. Há três [code]-&gt;[/code] em ambas declaração de tipo e a equação. Mas é claro, o primeiro jeito de escrever a função é bem mais legível, enquanto o segundo é muito mais uma demonstração do currying.

Porém, há momento em que utilizarmos estas notações é legal. Eu acho que a função [code]flip[/code] fica bem mais legível quando definida assim: 

Apesar de isso ser o mesmo que escrever [code]flip' f x y = f y x[/code], tornamos óbvio de que isso será usado para produzir uma nova função na maior parte do tempo. O caso mais comum na utilização do [code]flip[/code] é chamá-lo com somente o parâmetro da função e então passar o resultado para um mapa ou um filtro. Então utilize lambdas desse jeito quando você quiser deixar explicito que a sua função é principalmente destinada a ser parcialmente aplicada e passada em uma função como um parâmetro.

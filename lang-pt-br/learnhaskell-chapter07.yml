chapter: Módulos

title: Carregando módulos

text: Um módulo Haskell é uma coleção de funções relacionadas, tipos e typeclasses. Um programa Haskell é uma coleção de módulos onde o módulo principal carrega os outros módulos e então usa as funções definidas neles para fazer alguma coisa. Ter o código dividido em vários módulos tem várias vantagens. Se um módulo é genérico o bastante, as funções que ele exporta podem ser usadas em uma multitude de programas diferentes. Se o seu próprio código está separado em módulos auto-contidos que não dependem muito uns dos outros (nós também dizemos que eles são fracamente acoplados), você pode reusá-los no futuro. Isso faz a tarefa inteira de escrever código mais gerenciável, por tê-lo dividido em várias partes, cada uma das quais tendo algum propósito. 

A biblioteca padrão Haskell é dividida em módulos, cada um dos quais contendo funções e tipos que são de alguma forma relacionados e servem a alguma propósito comum. Tem um módulo para manipulação de listas, um módulo para programação concorrente, um módulo para lidar com números complexos, etc. Todas as funções, tipos e typeclasses com que trabalhamos até agora eram parte do módulo [code] Prelude [/code], que já é importado por padrão. Nesse capítulo, vamos examinar alguns módulos úteis e as funções que eles têm. Mas primeiro, veremos como importar módulos.

A sintaxe para importar módulos em um script Haskell é [code] import &lt;module name&gt; [/code]. Isso deve ser feito antes de se definir quaisquer funções, e por isso importações são geralmente feitas no topo do arquivo. Um script pode, é claro, importar vários módulos. Apenas ponha cada comando "import" em uma linha separada. Vamos importar o módulo [code] Data.List [/code], que possui várias funções úteis para se trabalhar com listas, e usar uma função que ele exporta para criar uma função que nos diz quantos elementos únicos uma lista tem. 


Quando você dá um [code] import Data.List [/code], todas as funções que [code] import Data.List [/code] exporta tornam-se disponíveis no namespace global, o que significa que você pode chamá-las de qualquer lugar no script. [code] nub [/code] é uma função definida em [code] Data.List [/code] que recebe uma lista e elimina elementos duplicados. Compôr [code] length [/code] e [code] nub [/code], fazendo [code] length . nub [/code], produz uma função que é o equivalente a [code] \xs -&gt; length (nub xs) [/code].

Você também pode colocar funções de módulos no namespace global quando utilizando o GHCI. Se você estiver no GHCI e quiser ser capaz de chamar as funções exportadas por [code] Data.List [/code], faça isto:


Se nós quisermos carregar os nomes de vários módulos dentro do GHCI, nós não temos que fazer [code] :m + [/code] várias vezes: nós podemos simplesmente carregar vários módulos de uma só vez.


Contudo, se você carregou um script que já importe um modulo, você não precisa usar [code] :m + [/code] para ter acesso a ele.

Se você só precisa de algumas funções de um módulo, você pode seletivamente importar apenas aquelas funções. Se nós quiséssemos importar apenas as funções [code] nub [/code] e [code] sort [/code] de [code] Data.List [/code], faríamos assim:


Você também pode escolher importar todas as funções de um módulo, exceto algumas selecionadas. Isso é frequentemente útil quando vários módulos exportam funções com o mesmo nome e você quer se livrar daquelas ofensoras. Digamos que nós já tenhamos nossa própria função chamada [code] nub [/code], e queiramos importar todas as funções de [code] Data.List [/code] exceto a função [code] nub [/code]:


Outro meio de lidar com conflitos de nome é fazer importações qualificadas. O módulo [code] Data.Map [/code] que provê uma estrutura de dados para pesquisar valores através de chaves, exporta várias funções com os mesmos nomes dos das funções em [code] Prelude [/code], como [code] filter [/code] ou [code] null [/code]. Então se importarmos [code] Data.Map [/code] e então chamarmos [code] filter [/code], Haskell não saberá qual função usar. Aqui está como resolvemos isso:


Isso faz com que se quisermos referenciar a função [code] filter [/code] do [code] Data.Map [/code], tenhamos de usar [code] Data.Map.filter [/code], enquanto [code] filter [/code] continua se referindo ao [code] filter [/code] normal que nós todos conhecemos e amamos. Mas digitar [code] Data.Map [/code] na frente de cada função daquele módulo é meio que tedioso. É por isso que podemos renomear a importação qualificada para algo mais curto:


Agora, para referenciar a função [code] filter [/code] do [code] Data.Map [/code], usamos apenas [code] M.filter [/code].

Leia essa <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/">útil referência</a> para ver quais módulos estão na biblioteca padrão. Um bom modo de adquirir algum novo conhecimento em Haskell é apenas ir clicando pela referência da biblioteca padrão e explorar os módulos e suas funções. Você ainda pode ver o código-fonte Haskell de cada módulo. Ler o código de alguns módulos é uma forma realmente boa de aprender Haskell e adquirir um sentimento sólido pela linguagem.

Para pesquisar pelas funções ou descobrir onde elas se encontram, use o <a href="http://haskell.org/hoogle">Hoogle</a>. Ele é um motor de busca realmente incrível: você pode pesquisar por nome, nome do módulo ou mesmo assinaturas de tipo.

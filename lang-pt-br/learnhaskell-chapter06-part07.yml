title: Composição de funções

text: Na matemática, <a href="http://pt.wikipedia.org/wiki/Composi%C3%A7%C3%A3o_de_fun%C3%A7%C3%B5es" target="_blank">composição de funções</a> é definida como: [image "(f . g)(x) = f(g(x))"], o que significa que compor duas funções produz uma nova função que, quando chamada com um parâmetro, digamos, <i>x</i>, é o equivalente a chamar <i>g</i> com o parâmetro <i>x</i> e então chamar o <i>f</i> com aquele resultado.

Em Haskell, composição de funções é praticamente a mesma coisa. Fazemos uma composição de funções com a função [code].[/code], que é definida como:

Atente à declaração de tipo. [code]f[/code] deve receber como parâmetro um valor que tem o mesmo tipo do valor retornado por [code]g[/code]. Assim, a função resultante recebe um parâmetro do mesmo tipo que [code]g[/code] recebe e retorna um valor do mesmo tipo que [code]f[/code] retorna. A expressão [code]negate . (* 3)[/code] retorna uma função que pega um número, multiplica ele por 3 e então o nega.

Um dos usos da composição de funções é fazer funções em tempo de execução para passar para outras funções. Claro, nós podemos usar lambdas para isso, mas muitas vezes, a composição de funções é mais clara e mais concisa. Digamos que tenhamos uma lista de números e queiramos tornar todos eles negativos. Uma forma de fazer isto seria pegar o valor absoluto de cada número e então negá-lo. Mais ou menos assim: 

Note a lambda e como ela se parece com o resultado da composição da função. Usando composição de função, podemos reescrever isto como:

Fabuloso! Composição de funções é associativo à direita, então nós podemos compor muitas funções de uma só vez. A expressão [code]f (g (z x))[/code] é o equivalente a [code](f . g . z) x[/code]. Com isso em mente, podemos transformar

em

Mas e quanto a funções que recebem muitos parâmetros? Bem, se quisermos usá-las na composição de funções, normalmente teremos que aplicá-las parcialmente apenas o suficiente para que cada função peque apenas um parâmetro. [code] sum (replicate 5 (max 6.7 8.9))[/code] pode ser reescrita como [code](sum . replicate 5 . max 6.7) 8.9[/code] ou como [code]sum . replicate 5 . max 6.7 $ 8.9[/code]. O que acontece aqui é: é criada uma função que pega o [code]max 6.7[/code] pega e a isso aplica [code]replicate 5[/code]. Em seguida, uma função que pega o resultado disso e faz a soma é criada. Finalmente, essa função é chamada com [code]8.9[/code]. Mas normalmente, você apenas lê isso como: aplique [code]8.9[/code] em [code]max 6.7[/code], então aplique [code]replicate 5[/code] a isso e depois aplique [code]sum[/code]. Se você quiser reescrever uma expresão com muitos parênteses usando composição de funções, você pode começar colocando o último parâmetro na função mais interna após um [code]$[/code] e então apenas compor todas as outras chamadas de funções, escrevendo-as sem o seu último parâmetro e pondo pontos entre elas. Se você tem [code]replicate 100 (product (map (*3) (zipWith max [1,2,3,4,5] [4,5,6,7,8])))[/code], você pode escrever isso como [code]replicate 100 . product . map (*3) . zipWith max [1,2,3,4,5] $ [4,5,6,7,8][/code]. Se a expressão terminar com três parânteses, são grandes as chances de que se você traduzi-la em uma composição de função, ela terá três operadores de composição.

Outro uso comum da composição de função é definir funções no tão chamado estilo livre de pontos. Pegue como exemplo esta função que escrevemos anteriormente: 

O [code]xs[/code] é exposto em ambos os lados. Por causa do currying, nós podemos omitir o [code]xs[/code] em ambos os lados, porque chamar [code]foldl (+) 0[/code] cria uma função que pega uma lista. Escrever a função como [code]sum' = foldl (+) 0[/code] é o que se chama de escrevê-la no estilo livre de pontos. Como poderíamos escrever o seguinte no estilo livre de pontos?

Não podemos simplesmente nos livrar do [code]x[/code] em ambos os lados. Há parênteses depois do [code]x[/code] no corpo da função. [code]cos (max 50)[/code] não faria sentido. Você não pode obter o cosseno de uma função. O que podemos fazer é expressar [code]fn[/code] como uma composição de funções.


Excelente! Muitas vezes, o estilo livre de pontos é mais legível e conciso, porque ele faz você pensar sobre funções e o que cada função que compõe os resultados faz em vez de pensar sobre os dados e como eles são embaralhados. Você pode pegar funções simples e usar composição como cola para formar funções mais complexas. Porém, muitas vezes, escrever uma função no estilo livre de pontos pode ser menos legível se a função for muito complexa. É por isso que fazer longos encadeamentos de composições de funções é desencorajado, apesar de eu me declarar culpado por às vezes ser feliz demais com composições. O estilo preferível é usar associações <i>let</i> para rotular resultados intermediários ou dividir o problema em subproblemas e depois colocá-los juntos de forma que a função faça sentido para alguém a lendo em vez de fazer uma longa cadeia de composições.

Na sessão sobre mapas e filtros, resolvemos um problema de encontrar a soma de todos os quadrados ímpares que são menores do que 10.000. Aqui está como a função se parece quando posta em uma função.

Sendo um grande fã de composição de função, provavelmente eu teria escrito assim:

No entanto, se houvesse alguma chance de que alguma outra pessoa fosse ler esse código, eu teria escrito assim:

Eu não iria ganhar nenhuma competição de golfe de código, mas alguém lendo a função provavelmente achará mais fácil de ler isso do que uma cadeia de composição.
